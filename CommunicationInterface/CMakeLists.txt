cmake_minimum_required(VERSION 2.8)

# find thrift
set(ENV{THRIFT_HOME} /usr)
find_package(Thrift REQUIRED)

# input and output of thrift compiler
set(T_FILE "SensorLoggerCommunication")
set(T_OUTPUT "thrift-service-cpp")

set(T_FILE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${T_FILE}.thrift)
set(T_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${T_OUTPUT})

# source files that will be generated by thrift
set(T_OUTPUT_SRC
	${T_OUTPUT_PATH}/${T_FILE}.cpp
	${T_OUTPUT_PATH}/${T_FILE}_constants.cpp
	${T_OUTPUT_PATH}/${T_FILE}_types.cpp
)

set(T_OUTPUT_HPP
	${T_OUTPUT_PATH}/${T_FILE}.h
	${T_OUTPUT_PATH}/${T_FILE}_constants.h
	${T_OUTPUT_PATH}/${T_FILE}_types.h
)

# generate code
if (THRIFT_COMPILER)
    message("Found thrift compiler at: " ${THRIFT_COMPILER})
	# create folder and generate code
	add_custom_command(
		OUTPUT ${T_OUTPUT_SRC}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${T_OUTPUT_PATH}
		COMMAND ${THRIFT_COMPILER} -v -r --gen cpp -out ${T_OUTPUT_PATH} ${T_FILE_PATH}
	)
else(THRIFT_COMPILER)
    message(SEND_ERROR "Cannot find thrift compiler in path.")
endif(THRIFT_COMPILER)

add_library(sensor_logger_communication ${T_OUTPUT_SRC})
target_link_libraries(sensor_logger_communication ${THRIFT_STATIC_LIB})
target_include_directories(sensor_logger_communication PUBLIC ${T_OUTPUT_PATH})

# install library and header files
install(TARGETS sensor_logger_communication
        ARCHIVE DESTINATION lib)
install(FILES ${T_OUTPUT_HPP} DESTINATION include)
