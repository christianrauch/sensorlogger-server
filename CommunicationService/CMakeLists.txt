# input and output of thrift compiler
set(T_FILE "SensorLoggerCommunication")
set(T_SOURCE "thrift-service-cpp")

set(T_FILE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${T_FILE}.thrift)
set(T_SOURCE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${T_SOURCE})

# source files that will be generated by thrift
set(T_OUTPUT_SRC
	${T_SOURCE_PATH}/${T_FILE}.cpp
	${T_SOURCE_PATH}/${T_FILE}_constants.cpp
	${T_SOURCE_PATH}/${T_FILE}_types.cpp
)

# find executable
find_program(THRIFT_BIN thrift)

# generate code
if (THRIFT_BIN)
    message("Found thrift compiler at: " ${THRIFT_BIN})
	# create folder and generate code
	add_custom_command(
		OUTPUT ${T_OUTPUT_SRC}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${T_SOURCE_PATH}
		COMMAND ${THRIFT_BIN} -v -r --gen cpp -out ${T_SOURCE_PATH} ${T_FILE_PATH}
	)
else(THRIFT_BIN)
    message(SEND_ERROR "Cannot find thrift compiler in path.")
endif(THRIFT_BIN)

add_library(sensor_logger_communication_base ${T_OUTPUT_SRC})

include_directories(${T_SOURCE_PATH})
include_directories(${CMAKE_SOURCE_DIR})

add_library(sensor_logger_communication SensorLoggerCommunicationServer.cpp)
target_link_libraries(sensor_logger_communication sensor_logger_communication_base)
target_link_libraries(sensor_logger_communication -lthrift)

